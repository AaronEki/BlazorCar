@using BlazorCar.Client.Authentication
@using Blazored.SessionStorage
@inject ISyncSessionStorageService SessionStorage
@inject ICartService CartService
@implements IDisposable
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<AuthorizeView Roles="Administrator">
    <Authorized>
        <a href="/admin" class="btn btn-info">
            Admin Module
        </a>
    </Authorized>    
</AuthorizeView>

@*making it so only an authorised (logged in) user can access the cart - by making the cart button only visible to an authorised user*@
<AuthorizeView>
    <Authorized>
        <a href="cart" class="btn btn-info">
            <i class="oi oi-cart"></i>
            Cart
            <span class="badge badge-pill badge-light">@GetCarCount()</span>
        </a>
    </Authorized>    
</AuthorizeView>

<AuthorizeView>
    <Authorized>
        <a @onclick="Logout" href="javascript::void(0)" class="btn btn-info">
            Logout
        </a>
    </Authorized>
    <NotAuthorized>
        <a href="/login" class="btn btn-info">
            Login
        </a>
    </NotAuthorized>
</AuthorizeView>

@code {
    protected override void OnInitialized()
    {
        CartService.OnChange += StateHasChanged;
    }

    public void Dispose(){
        CartService.OnChange -= StateHasChanged;
    }

    private int GetCarCount()
    {
        var cart = SessionStorage.GetItem<List<CarVariant>>("cart");
        return cart != null ? cart.Count : 0;
    }

    //button will change the user authentication state to null 
    private async Task Logout(){
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(null);
        navManager.NavigateTo("/", true);
    }
}
