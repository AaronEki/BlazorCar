@page "/login"
@using BlazorCar.Client.Authentication
@using System.Net
@inject HttpClient httpClient
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>    
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="loginRequest.UserName" class="form-control" placeholder="Username" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="loginRequest.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    //(Coding Droplets, 2022) has been used to implement the authentication functionality
    //creating a new instance of the LoginRequest
    private LoginRequest loginRequest = new LoginRequest();

    //making a function to authenticate the user
    private async Task Authenticate(){
        //sending the loginRequest as a HTTP POST to the /api/account/login serialised as JSON
        var loginResponse = await httpClient.PostAsJsonAsync<LoginRequest>("/api/account/Login", loginRequest);
        //if login success (creds match)
        if(loginResponse.IsSuccessStatusCode){
            //we then will create our userSession and authenticate the user so they are now authenticated - they then will be redirected to index
            //which is our home page
            var userSession = await loginResponse.Content.ReadFromJsonAsync<UserSession>();
            var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(userSession);
            navManager.NavigateTo("/", forceLoad: true);            
        }
        //otherwise we will display an error message to the user as their credentials are not valid
        else if(loginResponse.StatusCode == HttpStatusCode.Unauthorized){
            await js.InvokeVoidAsync("alert", "Invalid Username or Password");
            return;
        }
    }
}
